<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="aboutMessage" xml:space="preserve">
    <value>Este aplicativo foi desenvolvido para uso educacional apenas. Porém, deve fornecer uma boa estimativa para a viabilidade de sistemas fotovoltáicos, especialmente se você mora próximo ao Canadá, Estados Unidos, Rússia, Japão, África do Sul, Austrália, Brasil, México, Reino Unido, Coréia do Sul, Turquia, Indonésia, Alemanha, França, China, Itália ou Índia. Tome nota de que a legislação para energia varia muito de país para país e ajuda profissional é necessária se você está interessado em investir.</value>
  </data>
  <data name="cashFluxTitle" xml:space="preserve">
    <value>Fluxo de Caixa</value>
  </data>
  <data name="financesMessage" xml:space="preserve">
    <value>Para a análise financeira, consideramos a moeda e o custo total de sistemas solares no(a) COUNTRY (CURRENCY). O custo final do seu sistema fotovoltáico deve ser R$ TOTALCOST. O fluxo de caixa abaixo vai ilustrar o retorno financeiro para os próximos 25 anos, considerando um aumento anual de 5% no custo do kWh.</value>
  </data>
  <data name="formCoverage" xml:space="preserve">
    <value>Cobertura desejada:</value>
  </data>
  <data name="formFee" xml:space="preserve">
    <value>Preço do kWh:</value>
  </data>
  <data name="formSpendings" xml:space="preserve">
    <value>Quantia média gasta com energia por mês:</value>
  </data>
  <data name="generationMessage" xml:space="preserve">
    <value>Sua geração de energia mensal deverá ser assim:</value>
  </data>
  <data name="generationTitle" xml:space="preserve">
    <value>Geração de Energia</value>
  </data>
  <data name="ghiMessage" xml:space="preserve">
    <value>Sua região tem uma média de V1 kWh/(m².dia). Baseando-se nisso e na sua conta de luz, vamos calcular a viabilidade da energia solar onde você está.</value>
  </data>
  <data name="homeMessage" xml:space="preserve">
    <value>Este App irá ajudá-lo a investigar a viabilidade da instalação de painéis solares em sua região. Para isso, precisaremos de sua localização e de sua conta de luz. Por favor,  leia a About Page para mais informações.</value>
  </data>
  <data name="pieChartMessage" xml:space="preserve">
    <value>Este gráfico de pizza mostra o retorno financeiro total depois de 25 anos.</value>
  </data>
  <data name="pieChartTitle" xml:space="preserve">
    <value>Retorno Total</value>
  </data>
  <data name="revenueMessage" xml:space="preserve">
    <value>Sua receita mensal vai variar de acordo com a geração de energia:</value>
  </data>
  <data name="revenueTitle" xml:space="preserve">
    <value>Receita Mensal</value>
  </data>
  <data name="startMessage" xml:space="preserve">
    <value>Começar!</value>
  </data>
</root>